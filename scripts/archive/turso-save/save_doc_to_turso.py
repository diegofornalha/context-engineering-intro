#!/usr/bin/env python3
"""
Script para salvar documento de arquitetura no Turso
"""

import asyncio
import json
from pathlib import Path
from datetime import datetime
import subprocess
import sys

async def save_architecture_doc_to_turso():
    """Salva o documento de arquitetura no Turso"""
    
    print("üìÑ SALVANDO DOCUMENTO DE ARQUITETURA NO TURSO")
    print("=" * 60)
    
    # 1. Ler o documento
    doc_path = Path("docs/arquitetura_flexivel.md")
    
    if not doc_path.exists():
        print(f"‚ùå Erro: Arquivo {doc_path} n√£o encontrado")
        return False
    
    try:
        with open(doc_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"‚úÖ Documento lido: {len(content)} caracteres")
        
    except Exception as e:
        print(f"‚ùå Erro ao ler documento: {e}")
        return False
    
    # 2. Preparar dados para Turso
    doc_data = {
        "title": "Arquitetura Flex√≠vel - Sistema de Agentes Inteligentes",
        "type": "architecture_documentation",
        "content": content,
        "metadata": {
            "version": "1.0.0",
            "created_at": datetime.now().isoformat(),
            "author": "Sistema de Agentes",
            "tags": ["arquitetura", "flex√≠vel", "agentes", "prp", "turso", "sentry"],
            "status": "active",
            "priority": "high"
        },
        "sections": {
            "core_components": ["PRP Agent", "Turso", "Sentry"],
            "optional_components": ["CrewAI", "A2A"],
            "scenarios": ["Sistema M√≠nimo", "Com Mem√≥ria", "Com Monitoramento", "Sistema Completo"]
        }
    }
    
    print("üìä Dados preparados para Turso")
    
    # 3. Salvar no Turso via MCP
    try:
        # Usar o script de integra√ß√£o MCP existente
        from prp_agent.agents.agent_with_mcp_turso import PRPAgentWithMCPTurso
        
        agent = PRPAgentWithMCPTurso()
        
        # Verificar se MCP est√° dispon√≠vel
        if not agent._check_mcp_availability():
            print("‚ùå MCP Turso n√£o est√° dispon√≠vel")
            print("üí° Dica: Execute 'npm start' no diret√≥rio mcp-turso-cloud-diegofornalha")
            return False
        
        # Salvar documento
        success = await agent.save_conversation_to_mcp(
            message="Documento de Arquitetura Flex√≠vel",
            response=json.dumps(doc_data, indent=2),
            context="Documenta√ß√£o t√©cnica da arquitetura do sistema"
        )
        
        if success:
            print("‚úÖ Documento salvo no Turso com sucesso!")
            
            # 4. Buscar e mostrar o documento salvo
            print("\nüîç VERIFICANDO DOCUMENTO SALVO:")
            print("-" * 40)
            
            # Buscar documentos relacionados
            search_results = await agent.search_relevant_context(
                "arquitetura flex√≠vel sistema agentes",
                limit=3
            )
            
            if search_results:
                print(f"üìã Encontrados {len(search_results)} documentos relacionados:")
                for i, result in enumerate(search_results, 1):
                    print(f"   {i}. {result.get('title', 'Sem t√≠tulo')}")
                    print(f"      Tipo: {result.get('type', 'N/A')}")
                    print(f"      Data: {result.get('created_at', 'N/A')}")
                    print()
            else:
                print("üìã Nenhum documento relacionado encontrado")
            
            return True
        else:
            print("‚ùå Falha ao salvar documento no Turso")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao salvar no Turso: {e}")
        return False

async def demonstrate_turso_integration():
    """Demonstra integra√ß√£o com Turso"""
    
    print("\nüéØ DEMONSTRA√á√ÉO DE INTEGRA√á√ÉO TURSO")
    print("=" * 60)
    
    try:
        from prp_agent.agents.agent_with_mcp_turso import PRPAgentWithMCPTurso
        
        agent = PRPAgentWithMCPTurso()
        
        # Verificar disponibilidade
        print("üîç Verificando disponibilidade do MCP Turso...")
        if agent._check_mcp_availability():
            print("‚úÖ MCP Turso dispon√≠vel")
        else:
            print("‚ùå MCP Turso n√£o dispon√≠vel")
            return
        
        # Testar busca
        print("\nüîç Testando busca no Turso...")
        results = await agent.search_relevant_context(
            "arquitetura sistema",
            limit=2
        )
        
        if results:
            print(f"‚úÖ Encontrados {len(results)} resultados")
            for result in results:
                print(f"   ‚Ä¢ {result.get('title', 'Sem t√≠tulo')}")
        else:
            print("üìã Nenhum resultado encontrado")
        
        # Testar salvamento
        print("\nüíæ Testando salvamento no Turso...")
        test_data = {
            "title": "Teste de Integra√ß√£o Turso",
            "content": "Este √© um teste de integra√ß√£o com o Turso",
            "timestamp": datetime.now().isoformat()
        }
        
        success = await agent.save_conversation_to_mcp(
            message="Teste de integra√ß√£o",
            response=json.dumps(test_data),
            context="Teste de funcionalidade"
        )
        
        if success:
            print("‚úÖ Teste de salvamento bem-sucedido")
        else:
            print("‚ùå Falha no teste de salvamento")
            
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")

async def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ SALVANDO DOCUMENTO DE ARQUITETURA NO TURSO")
    print("=" * 80)
    
    # 1. Salvar documento principal
    success = await save_architecture_doc_to_turso()
    
    if success:
        print("\nüéâ DOCUMENTO SALVO COM SUCESSO!")
        print("=" * 80)
        print("‚úÖ Arquitetura Flex√≠vel documentada")
        print("‚úÖ Documento salvo no Turso")
        print("‚úÖ Integra√ß√£o MCP funcionando")
        print("‚úÖ Sistema pronto para uso")
        
        # 2. Demonstra√ß√£o adicional
        await demonstrate_turso_integration()
        
    else:
        print("\n‚ùå FALHA AO SALVAR DOCUMENTO")
        print("=" * 80)
        print("üí° Verifique:")
        print("   ‚Ä¢ MCP Turso est√° rodando")
        print("   ‚Ä¢ Arquivo docs/arquitetura_flexivel.md existe")
        print("   ‚Ä¢ Configura√ß√£o do Turso est√° correta")

if __name__ == "__main__":
    asyncio.run(main()) 