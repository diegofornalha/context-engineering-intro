#!/usr/bin/env python3
"""
üéØ EXEMPLO PR√ÅTICO: An√°lise de PRP para Agente de Organiza√ß√£o de Projeto

Este script demonstra como o PRP Agent analisa um PRP complexo e extrai 
tarefas espec√≠ficas com estimativas reais.
"""

import asyncio
import json
from agents.dependencies import PRPAgentDependencies
from agents.tools import create_prp, analyze_prp_with_llm, get_prp_details


async def criar_prp_exemplo():
    """Cria um PRP exemplo sobre agente de organiza√ß√£o de projeto."""
    
    deps = PRPAgentDependencies(session_id="demo-organizacao-projeto")
    
    # PRP detalhado para agente de organiza√ß√£o
    prp_data = {
        "name": "agente-organizacao-projeto",
        "title": "Agente IA para Organiza√ß√£o Inteligente de Projetos",
        "description": """
Desenvolver um agente de IA especializado em analisar e organizar projetos de software automaticamente. 
O agente deve ser capaz de:

1. **An√°lise de Estrutura**: Examinar hierarquia de arquivos e identificar padr√µes organizacionais
2. **Detec√ß√£o de Duplica√ß√£o**: Encontrar c√≥digo duplicado e sugerir consolida√ß√£o
3. **Refatora√ß√£o Inteligente**: Propor melhorias na arquitetura e organiza√ß√£o do c√≥digo
4. **Organiza√ß√£o de Documenta√ß√£o**: Categorizar e estruturar documentos automaticamente
5. **M√©tricas de Qualidade**: Avaliar qualidade do c√≥digo e estrutura do projeto
6. **Sugest√µes Proativas**: Recomendar melhorias baseadas em best practices

O agente deve integrar com sistemas existentes (Git, IDEs) e fornecer relat√≥rios acion√°veis.
        """,
        "objective": """
Criar um agente de IA que automatize a organiza√ß√£o de projetos, reduzindo tempo de manuten√ß√£o 
em 60% e melhorando a qualidade do c√≥digo atrav√©s de an√°lises inteligentes e sugest√µes autom√°ticas.
        """,
        "context_data": json.dumps({
            "target_languages": ["Python", "TypeScript", "JavaScript", "Go"],
            "integration_points": ["VSCode", "Git", "GitHub", "CI/CD"],
            "analysis_types": ["structure", "duplication", "complexity", "documentation"],
            "output_formats": ["reports", "suggestions", "automated_fixes"],
            "performance_targets": {
                "analysis_time": "< 30s per 1000 files",
                "accuracy": "> 90% for duplication detection",
                "user_adoption": "> 80% team usage"
            }
        }),
        "implementation_details": json.dumps({
            "technologies": {
                "backend": "FastAPI + PostgreSQL",
                "ai_models": "OpenAI GPT-4 + CodeT5 + Tree-sitter",
                "analysis_engine": "AST parsing + semantic analysis",
                "integrations": "LSP protocol + Git hooks"
            },
            "architecture": {
                "components": [
                    "File analyzer service",
                    "Duplication detector",
                    "Refactoring suggester", 
                    "Documentation organizer",
                    "Metrics calculator",
                    "Report generator"
                ],
                "data_flow": "File scan ‚Üí Analysis ‚Üí ML processing ‚Üí Suggestions ‚Üí Reports"
            },
            "deployment": {
                "environment": "Docker containers",
                "scaling": "Kubernetes horizontal scaling",
                "storage": "PostgreSQL + Redis cache"
            }
        }),
        "priority": "high",
        "tags": json.dumps(["ai-agent", "code-analysis", "automation", "organization", "productivity"])
    }
    
    print("üî® Criando PRP exemplo: Agente de Organiza√ß√£o de Projeto")
    result = await create_prp(
        deps=deps,
        name=prp_data["name"],
        title=prp_data["title"], 
        description=prp_data["description"],
        objective=prp_data["objective"],
        context_data=prp_data["context_data"],
        implementation_details=prp_data["implementation_details"],
        priority=prp_data["priority"],
        tags=prp_data["tags"]
    )
    
    print(f"‚úÖ {result}")
    
    # Extrair ID do PRP criado
    if "ID:" in result:
        prp_id = int(result.split("ID: ")[1])
        return prp_id
    
    return None


async def analisar_prp(prp_id: int):
    """Executa an√°lise LLM detalhada do PRP."""
    
    deps = PRPAgentDependencies(session_id="demo-analise-organizacao")
    
    print(f"\nüß† Executando an√°lise LLM do PRP {prp_id}...")
    
    # An√°lise de extra√ß√£o de tarefas
    analysis_result = await analyze_prp_with_llm(
        ctx=deps,
        prp_id=prp_id,
        analysis_type="task_extraction"
    )
    
    print("üìä RESULTADO DA AN√ÅLISE:")
    print("=" * 60)
    print(analysis_result)
    
    return analysis_result


async def obter_detalhes(prp_id: int):
    """Obt√©m detalhes completos do PRP analisado."""
    
    deps = PRPAgentDependencies(session_id="demo-detalhes-organizacao")
    
    print(f"\nüìã Obtendo detalhes completos do PRP {prp_id}...")
    
    details = await get_prp_details(
        ctx=deps,
        prp_id=prp_id
    )
    
    print("üìÑ DETALHES COMPLETOS:")
    print("=" * 60)
    print(details)
    
    return details


async def demo_completa():
    """Demonstra√ß√£o completa do processo de an√°lise de PRP."""
    
    print("üöÄ DEMO: An√°lise Completa de PRP - Agente de Organiza√ß√£o")
    print("=" * 70)
    
    try:
        # Passo 1: Criar PRP
        prp_id = await criar_prp_exemplo()
        
        if prp_id:
            # Passo 2: Analisar PRP
            await analisar_prp(prp_id)
            
            # Passo 3: Obter detalhes
            await obter_detalhes(prp_id)
            
            print("\nüéØ CONCLUS√ÉO:")
            print("‚úÖ PRP criado com sucesso")
            print("‚úÖ An√°lise LLM executada")
            print("‚úÖ Tarefas extra√≠das automaticamente")
            print("‚úÖ Estimativas de tempo geradas")
            print("‚úÖ Complexidade avaliada")
            
            print(f"\nüîó Para ver o PRP: use get_prp_details com ID {prp_id}")
            
        else:
            print("‚ùå Erro ao criar PRP")
            
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")


def executar_analise_personalizada():
    """Simula an√°lise personalizada com dados reais."""
    
    print("\nüéØ AN√ÅLISE PERSONALIZADA: Agente de Organiza√ß√£o de Projeto")
    print("=" * 60)
    
    # Simular resultado de an√°lise LLM mais realista
    analise_real = {
        "tasks": [
            {
                "name": "Configurar infraestrutura base",
                "description": "Setup FastAPI, PostgreSQL, Redis e Docker containers",
                "type": "setup",
                "priority": "critical",
                "estimated_hours": 8.0,
                "complexity": "medium",
                "context_files": ["docker-compose.yml", "requirements.txt", "main.py"],
                "acceptance_criteria": "API funcionando + BD configurado + Cache ativo"
            },
            {
                "name": "Implementar analisador de arquivos",
                "description": "Desenvolver sistema para scan e parsing de estruturas de projeto",
                "type": "feature",
                "priority": "critical", 
                "estimated_hours": 12.0,
                "complexity": "high",
                "context_files": ["file_analyzer.py", "ast_parser.py", "structure_detector.py"],
                "acceptance_criteria": "Scan 1000+ arquivos em <30s + detec√ß√£o de linguagens"
            },
            {
                "name": "Detector de c√≥digo duplicado",
                "description": "IA para encontrar duplica√ß√£o usando AST e an√°lise sem√¢ntica",
                "type": "feature",
                "priority": "high",
                "estimated_hours": 16.0,
                "complexity": "high",
                "context_files": ["duplication_detector.py", "semantic_analyzer.py", "ml_models.py"],
                "acceptance_criteria": ">90% precis√£o + <5% falsos positivos"
            },
            {
                "name": "Engine de sugest√µes de refatora√ß√£o",
                "description": "Sistema de IA para propor melhorias de arquitetura e organiza√ß√£o",
                "type": "feature", 
                "priority": "high",
                "estimated_hours": 20.0,
                "complexity": "high",
                "context_files": ["refactoring_engine.py", "architecture_analyzer.py", "suggestions_ai.py"],
                "acceptance_criteria": "Sugest√µes acion√°veis + explica√ß√µes detalhadas"
            },
            {
                "name": "Organizador autom√°tico de documenta√ß√£o",
                "description": "Categorizar e estruturar docs baseado em conte√∫do e contexto",
                "type": "feature",
                "priority": "medium",
                "estimated_hours": 10.0,
                "complexity": "medium", 
                "context_files": ["doc_organizer.py", "content_classifier.py", "markdown_parser.py"],
                "acceptance_criteria": "Classifica√ß√£o autom√°tica + estrutura hier√°rquica"
            },
            {
                "name": "Sistema de m√©tricas e relat√≥rios",
                "description": "Dashboard com m√©tricas de qualidade e relat√≥rios acion√°veis",
                "type": "feature",
                "priority": "medium",
                "estimated_hours": 14.0,
                "complexity": "medium",
                "context_files": ["metrics_calculator.py", "report_generator.py", "dashboard.py"],
                "acceptance_criteria": "Dashboard interativo + exports PDF/JSON"
            },
            {
                "name": "Integra√ß√£o com IDEs e Git",
                "description": "Plugins VSCode/IDEs + Git hooks para an√°lise autom√°tica",
                "type": "feature",
                "priority": "medium",
                "estimated_hours": 18.0,
                "complexity": "high",
                "context_files": ["vscode_extension/", "git_hooks.py", "lsp_protocol.py"],
                "acceptance_criteria": "Plugin funcional + hooks autom√°ticos"
            },
            {
                "name": "Testes automatizados completos",
                "description": "Suite de testes unit√°rios, integra√ß√£o e performance",
                "type": "test",
                "priority": "high",
                "estimated_hours": 12.0,
                "complexity": "medium",
                "context_files": ["tests/", "pytest.ini", "test_fixtures.py"],
                "acceptance_criteria": ">90% cobertura + testes performance"
            },
            {
                "name": "Documenta√ß√£o e guias de uso",
                "description": "Documenta√ß√£o completa para desenvolvedores e usu√°rios finais",
                "type": "docs",
                "priority": "medium",
                "estimated_hours": 6.0,
                "complexity": "low",
                "context_files": ["README.md", "docs/", "examples/"],
                "acceptance_criteria": "Guias completos + exemplos pr√°ticos"
            },
            {
                "name": "CI/CD e deployment",
                "description": "Pipeline autom√°tico de build, test e deploy",
                "type": "setup",
                "priority": "medium", 
                "estimated_hours": 8.0,
                "complexity": "medium",
                "context_files": [".github/workflows/", "Dockerfile", "k8s/"],
                "acceptance_criteria": "Deploy autom√°tico + monitoramento"
            }
        ],
        "summary": "Agente de IA completo para organiza√ß√£o inteligente de projetos com an√°lise autom√°tica, detec√ß√£o de duplica√ß√£o, sugest√µes de refatora√ß√£o e integra√ß√£o com ferramentas de desenvolvimento",
        "total_estimated_hours": 124.0,
        "complexity_assessment": "high",
        "risk_factors": [
            "Complexidade da an√°lise sem√¢ntica de c√≥digo",
            "Precis√£o dos modelos de IA para sugest√µes",
            "Performance em projetos grandes (10k+ arquivos)",
            "Integra√ß√£o com diferentes IDEs e workflows"
        ],
        "success_metrics": [
            "60% redu√ß√£o no tempo de organiza√ß√£o manual",
            "90%+ precis√£o na detec√ß√£o de duplica√ß√£o",
            "80%+ ado√ß√£o pela equipe",
            "An√°lise <30s para projetos m√©dios"
        ]
    }
    
    print(f"üìä **RESULTADO DA AN√ÅLISE LLM:**")
    print(f"**Projeto:** {analise_real['summary']}")
    print(f"**Estimativa Total:** {analise_real['total_estimated_hours']} horas")
    print(f"**Complexidade:** {analise_real['complexity_assessment'].upper()}")
    print()
    
    print("üîß **TAREFAS EXTRA√çDAS:**")
    for i, task in enumerate(analise_real["tasks"], 1):
        print(f"{i:2d}. **{task['name']}** ({task['type']}, {task['priority']})")
        print(f"    {task['description']}")
        print(f"    ‚è±Ô∏è Estimativa: {task['estimated_hours']}h | üéØ Complexidade: {task['complexity']}")
        print(f"    üìÅ Arquivos: {', '.join(task['context_files'][:2])}...")
        print(f"    ‚úÖ Crit√©rio: {task['acceptance_criteria']}")
        print()
    
    print("üéØ **M√âTRICAS DE SUCESSO:**")
    for metric in analise_real["success_metrics"]:
        print(f"   ‚Ä¢ {metric}")
    
    print("\n‚ö†Ô∏è **FATORES DE RISCO:**")
    for risk in analise_real["risk_factors"]:
        print(f"   ‚Ä¢ {risk}")
    
    print(f"\nüìà **RESUMO EXECUTIVO:**")
    print(f"   Total de tarefas: {len(analise_real['tasks'])}")
    print(f"   Features principais: {len([t for t in analise_real['tasks'] if t['type'] == 'feature'])}")
    print(f"   Setup e configura√ß√£o: {len([t for t in analise_real['tasks'] if t['type'] == 'setup'])}")
    print(f"   Testes e documenta√ß√£o: {len([t for t in analise_real['tasks'] if t['type'] in ['test', 'docs']])}")
    print(f"   Tempo estimado: ~{analise_real['total_estimated_hours']} horas ({analise_real['total_estimated_hours']/40:.1f} semanas)")


if __name__ == "__main__":
    print("üéØ ESCOLHA O TIPO DE DEMONSTRA√á√ÉO:")
    print("1. Demo completa com banco de dados (async)")
    print("2. An√°lise personalizada (simulada)")
    
    choice = input("Digite 1 ou 2: ").strip()
    
    if choice == "1":
        asyncio.run(demo_completa())
    elif choice == "2":
        executar_analise_personalizada()
    else:
        print("Executando an√°lise personalizada por padr√£o...")
        executar_analise_personalizada()