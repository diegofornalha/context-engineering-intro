#!/usr/bin/env python3
"""
CLI com integra√ß√£o MCP REAL para Cursor Agent.

Este script usa MCP Turso REAL ao inv√©s de simula√ß√µes.
"""

import asyncio
import sys
import argparse
import json
from typing import Dict, Any
from agents.agent import chat_with_prp_agent_sync, PRPAgentDependencies


def call_mcp_turso_real(tool_name: str, params: Dict[str, Any]) -> Dict[str, Any]:
    """
    Chama MCP Turso REAL dispon√≠vel no Cursor Agent.
    
    NOTA: Esta fun√ß√£o usa as ferramentas MCP reais do Cursor
    ao inv√©s das simula√ß√µes usadas nos outros arquivos.
    """
    
    try:
        # Importar ferramentas MCP Turso reais (dispon√≠veis no Cursor Agent)
        # Estas devem estar dispon√≠veis quando executado no ambiente Cursor
        
        if tool_name == "add_conversation":
            # Usar MCP real para adicionar conversa
            from mcp_turso import add_conversation
            return add_conversation(
                session_id=params.get("session_id", "cursor-agent"),
                message=params.get("message", ""),
                response=params.get("response", ""),
                context=params.get("context", None),
                database=params.get("database", "context-memory")
            )
            
        elif tool_name == "execute_query":
            # Usar MCP real para queries
            from mcp_turso import execute_query
            return execute_query(
                query=params.get("query", ""),
                params=params.get("params", []),
                database=params.get("database", "context-memory")
            )
            
        elif tool_name == "execute_read_only_query":
            # Usar MCP real para leitura
            from mcp_turso import execute_read_only_query
            return execute_read_only_query(
                query=params.get("query", ""),
                params=params.get("params", []),
                database=params.get("database", "context-memory")
            )
            
        else:
            print(f"‚ö†Ô∏è Ferramenta MCP desconhecida: {tool_name}")
            return {"success": False, "error": f"Ferramenta {tool_name} n√£o implementada"}
            
    except ImportError as e:
        # MCP n√£o dispon√≠vel - fallback para o agente normal
        print(f"üîß MCP n√£o dispon√≠vel: {e}")
        print("üí° Usando agente padr√£o sem persist√™ncia MCP")
        return {"success": False, "error": "MCP n√£o dispon√≠vel", "fallback": True}
        
    except Exception as e:
        print(f"‚ùå Erro MCP: {e}")
        return {"success": False, "error": str(e)}


def process_message_with_mcp(message: str, file_context: str = None, action: str = "chat") -> str:
    """Processa mensagem usando MCP real quando dispon√≠vel."""
    
    try:
        # Configurar depend√™ncias
        deps = PRPAgentDependencies(
            session_id="cursor-agent-mcp-session"
        )
        
        # Processar com agente
        if action == "chat":
            response = chat_with_prp_agent_sync(message, deps)
        elif action == "insights":
            insight_prompt = f"Forne√ßa insights sobre o projeto. Contexto: {message}"
            if file_context:
                insight_prompt += f"\n\nArquivo:\n{file_context}"
            response = chat_with_prp_agent_sync(insight_prompt, deps)
        elif action == "create_prp":
            prp_prompt = f"Crie um PRP detalhado para: {message}"
            if file_context:
                prp_prompt += f"\n\nC√≥digo base:\n{file_context}"
            response = chat_with_prp_agent_sync(prp_prompt, deps)
        else:
            response = f"‚ùå A√ß√£o desconhecida: {action}"
        
        # Tentar salvar no MCP real
        mcp_result = call_mcp_turso_real("add_conversation", {
            "session_id": deps.session_id,
            "message": message,
            "response": response,
            "context": file_context,
            "database": "context-memory"
        })
        
        if mcp_result.get("success"):
            print(f"üíæ MCP: Conversa salva com ID {mcp_result.get('conversation_id', 'N/A')}")
        elif not mcp_result.get("fallback"):
            print(f"‚ö†Ô∏è MCP falhou: {mcp_result.get('error')}")
        
        return response
        
    except Exception as e:
        return f"‚ùå Erro: {str(e)}"


def main():
    """CLI principal com MCP real."""
    
    parser = argparse.ArgumentParser(description="PRP Agent CLI com MCP Real")
    parser.add_argument("message", nargs="?", help="Mensagem para o agente")
    parser.add_argument("--file", help="Contexto de arquivo", default=None)
    parser.add_argument("--insights", action="store_true", help="Obter insights")
    parser.add_argument("--create-prp", action="store_true", help="Criar PRP")
    parser.add_argument("--json", action="store_true", help="Sa√≠da JSON")
    parser.add_argument("--test-mcp", action="store_true", help="Testar conex√£o MCP")
    
    args = parser.parse_args()
    
    # Testar MCP se solicitado
    if args.test_mcp:
        mcp_test = call_mcp_turso_real("execute_read_only_query", {
            "query": "SELECT COUNT(*) as total FROM conversations",
            "database": "context-memory"
        })
        
        result = {
            "mcp_available": mcp_test.get("success", False),
            "error": mcp_test.get("error") if not mcp_test.get("success") else None,
            "test_query": "SELECT COUNT(*) as total FROM conversations"
        }
        
        print(json.dumps(result, ensure_ascii=False, indent=2))
        return
    
    # Verificar se message foi fornecido
    if not args.message:
        parser.error("message √© obrigat√≥rio quando n√£o usando --test-mcp")
    
    # Determinar a√ß√£o
    action = "chat"
    if args.insights:
        action = "insights"
    elif args.create_prp:
        action = "create_prp"
    
    # Processar com MCP
    response = process_message_with_mcp(args.message, args.file, action)
    
    # Sa√≠da
    if args.json:
        result = {
            "success": not response.startswith("‚ùå"),
            "response": response,
            "action": action,
            "message": args.message,
            "mcp_enabled": True
        }
        print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        print(response)


if __name__ == "__main__":
    main()