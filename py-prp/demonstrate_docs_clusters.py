#!/usr/bin/env python3
"""
Demonstra√ß√£o do Sistema de Documenta√ß√£o em Clusters
Data: 02/08/2025

Script para demonstrar todas as funcionalidades do sistema de gest√£o
de documenta√ß√£o organizada em clusters com gest√£o de ciclo de vida.
"""

import sqlite3
import json
from datetime import datetime, date
from typing import List, Dict

class DocsClusterManager:
    """
    Gerenciador de documenta√ß√£o organizada em clusters
    """
    
    def __init__(self, db_path: str = "context-memory.db"):
        self.db_path = db_path
    
    def show_cluster_overview(self):
        """Mostra vis√£o geral dos clusters"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT icon, display_name, active_docs, total_docs, 
                       avg_quality_score, max_docs
                FROM docs_clusters 
                ORDER BY avg_quality_score DESC
            """)
            
            clusters = cursor.fetchall()
            
            print("üìä OVERVIEW DOS CLUSTERS:")
            print("=" * 60)
            for cluster in clusters:
                status = "üü¢" if cluster['active_docs'] <= cluster['max_docs'] else "üî¥"
                print(f"{status} {cluster['icon']} {cluster['display_name']}")
                print(f"   üìÑ Documentos: {cluster['active_docs']}/{cluster['total_docs']} (m√°x: {cluster['max_docs']})")
                print(f"   ‚≠ê Qualidade m√©dia: {cluster['avg_quality_score']:.1f}/10")
                print()
    
    def show_cluster_health(self):
        """Mostra sa√∫de dos clusters"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM v_cluster_health ORDER BY avg_quality_score DESC")
            clusters = cursor.fetchall()
            
            print("üè• SA√öDE DOS CLUSTERS:")
            print("=" * 60)
            for cluster in clusters:
                health_icon = {
                    'healthy': 'üü¢',
                    'overcrowded': 'üü°', 
                    'low_quality': 'üü†',
                    'empty': 'üî¥'
                }.get(cluster['health_status'], '‚ö™')
                
                print(f"{health_icon} {cluster['icon']} {cluster['display_name']}")
                print(f"   Status: {cluster['health_status']}")
                print(f"   üìã Recomenda√ß√£o: {cluster['recommendation']}")
                print()
    
    def show_docs_by_cluster(self, cluster_name: str = None):
        """Mostra documentos de um cluster espec√≠fico ou todos"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            if cluster_name:
                cursor.execute("""
                    SELECT d.*, dc.display_name as cluster_display_name, dc.icon as cluster_icon
                    FROM docs d
                    JOIN docs_clusters dc ON d.cluster_name = dc.name
                    WHERE d.cluster_name = ? AND d.content_status = 'active'
                    ORDER BY d.cluster_priority, d.quality_score DESC
                """, (cluster_name,))
            else:
                cursor.execute("""
                    SELECT d.*, dc.display_name as cluster_display_name, dc.icon as cluster_icon
                    FROM docs d
                    JOIN docs_clusters dc ON d.cluster_name = dc.name
                    WHERE d.content_status = 'active'
                    ORDER BY dc.avg_quality_score DESC, d.cluster_priority, d.quality_score DESC
                """)
            
            docs = cursor.fetchall()
            
            print(f"üìö DOCUMENTOS {'DO CLUSTER ' + cluster_name if cluster_name else 'POR CLUSTER'}:")
            print("=" * 60)
            
            current_cluster = None
            for doc in docs:
                if doc['cluster_name'] != current_cluster:
                    current_cluster = doc['cluster_name']
                    print(f"\n{doc['cluster_icon']} {doc['cluster_display_name']}:")
                    print("-" * 40)
                
                quality_stars = "‚≠ê" * int(doc['quality_score'] / 2)
                relevance_bars = "üìä" * int(doc['relevance_score'] / 2)
                
                print(f"  üìÑ {doc['title']}")
                print(f"     üéØ Qualidade: {quality_stars} ({doc['quality_score']:.1f}/10)")
                print(f"     üìà Relev√¢ncia: {relevance_bars} ({doc['relevance_score']:.1f}/10)")
                print(f"     üëÄ Visualiza√ß√µes: {doc['view_count']} | üëç Votos √∫teis: {doc['useful_votes']}")
                print(f"     ‚è±Ô∏è  Leitura: {doc['estimated_read_time']}min | üè∑Ô∏è  Tipo: {doc['doc_type']}")
                print(f"     üìù {doc['summary'][:80]}...")
                print()
    
    def show_obsolete_management(self):
        """Mostra gest√£o de documentos obsoletos"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # Documentos obsoletos
            cursor.execute("SELECT * FROM v_obsolete_docs")
            obsolete = cursor.fetchall()
            
            print("üóëÔ∏è  GEST√ÉO DE DOCUMENTOS OBSOLETOS:")
            print("=" * 60)
            
            if obsolete:
                for doc in obsolete:
                    print(f"‚ùå {doc['obsolete_title']}")
                    print(f"   ‚û°Ô∏è  Substitu√≠do por: {doc['superseded_by_title']}")
                    print(f"   üìà Nova qualidade: {doc['new_quality_score']:.1f}/10")
                    print(f"   üìÖ Obsoleto desde: {doc['obsolete_date']}")
                    print()
            else:
                print("‚úÖ Nenhum documento obsoleto encontrado.")
                print()
            
            # An√°lise de obsolesc√™ncia
            cursor.execute("""
                SELECT d.title, oa.obsolescence_score, oa.recommendation, oa.confidence
                FROM docs_obsolescence_analysis oa
                JOIN docs d ON oa.doc_id = d.id
                ORDER BY oa.obsolescence_score DESC
                LIMIT 5
            """)
            analysis = cursor.fetchall()
            
            if analysis:
                print("üîç AN√ÅLISE DE OBSOLESC√äNCIA:")
                print("-" * 40)
                for item in analysis:
                    score_bar = "üü•" * int(item['obsolescence_score'] * 5)
                    confidence_bar = "üü¶" * int(item['confidence'] * 5)
                    print(f"üìÑ {item['title']}")
                    print(f"   üìä Score obsolesc√™ncia: {score_bar} ({item['obsolescence_score']:.2f})")
                    print(f"   üéØ Confian√ßa: {confidence_bar} ({item['confidence']:.2f})")
                    print(f"   üí° Recomenda√ß√£o: {item['recommendation']}")
                    print()
    
    def show_docs_needing_attention(self):
        """Mostra documentos que precisam aten√ß√£o"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM v_docs_need_attention LIMIT 10")
            docs = cursor.fetchall()
            
            print("‚ö†Ô∏è  DOCUMENTOS QUE PRECISAM ATEN√á√ÉO:")
            print("=" * 60)
            
            if docs:
                for doc in docs:
                    reason_icon = {
                        'low_quality': 'üìâ',
                        'low_relevance': 'üîª',
                        'needs_validation': '‚è∞',
                        'user_reported': 'üö®'
                    }.get(doc['attention_reason'], '‚ö†Ô∏è')
                    
                    print(f"{reason_icon} {doc['title']}")
                    print(f"   üìÅ Cluster: {doc['cluster_name']}")
                    print(f"   üéØ Qualidade: {doc['quality_score']:.1f} | Relev√¢ncia: {doc['relevance_score']:.1f}")
                    print(f"   üìÖ Validado h√° {doc['days_since_validation']:.0f} dias")
                    print(f"   üí≠ Motivo: {doc['attention_reason']}")
                    print()
            else:
                print("‚úÖ Todos os documentos est√£o em boa condi√ß√£o!")
                print()
    
    def show_change_history(self, limit: int = 10):
        """Mostra hist√≥rico de mudan√ßas"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT dc.*, d.title
                FROM docs_changes dc
                JOIN docs d ON dc.doc_id = d.id
                ORDER BY dc.created_at DESC
                LIMIT ?
            """, (limit,))
            
            changes = cursor.fetchall()
            
            print(f"üìú HIST√ìRICO DE MUDAN√áAS (√∫ltimas {limit}):")
            print("=" * 60)
            
            for change in changes:
                change_icon = {
                    'created': '‚ú®',
                    'updated': 'üìù',
                    'superseded': 'üîÑ',
                    'archived': 'üì¶',
                    'quality_update': '‚≠ê'
                }.get(change['change_type'], 'üìÑ')
                
                print(f"{change_icon} {change['change_type'].upper()}: {change['title']}")
                print(f"   üìÖ {change['created_at']} por {change['changed_by']}")
                
                if change['old_content_status'] and change['new_content_status']:
                    print(f"   üìä Status: {change['old_content_status']} ‚Üí {change['new_content_status']}")
                
                if change['old_quality_score'] and change['new_quality_score']:
                    print(f"   ‚≠ê Qualidade: {change['old_quality_score']:.1f} ‚Üí {change['new_quality_score']:.1f}")
                
                if change['change_reason']:
                    print(f"   üí≠ Motivo: {change['change_reason']}")
                print()
    
    def search_across_clusters(self, query: str, cluster_filter: str = None):
        """Busca atrav√©s dos clusters"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            sql = """
                SELECT d.*, dc.display_name as cluster_display_name, dc.icon as cluster_icon
                FROM docs d
                JOIN docs_clusters dc ON d.cluster_name = dc.name
                WHERE d.content_status = 'active' 
                  AND (d.title LIKE ? OR d.summary LIKE ? OR d.keywords LIKE ?)
            """
            params = [f"%{query}%", f"%{query}%", f"%{query}%"]
            
            if cluster_filter:
                sql += " AND d.cluster_name = ?"
                params.append(cluster_filter)
            
            sql += " ORDER BY d.quality_score DESC, d.relevance_score DESC"
            
            cursor.execute(sql, params)
            results = cursor.fetchall()
            
            print(f"üîç BUSCA: '{query}'" + (f" no cluster {cluster_filter}" if cluster_filter else ""))
            print("=" * 60)
            
            if results:
                for doc in results:
                    print(f"{doc['cluster_icon']} {doc['title']}")
                    print(f"   üìÅ {doc['cluster_display_name']}")
                    print(f"   ‚≠ê {doc['quality_score']:.1f}/10 | üìà {doc['relevance_score']:.1f}/10")
                    print(f"   üìù {doc['summary'][:100]}...")
                    print()
            else:
                print("‚ùå Nenhum resultado encontrado.")
                print()
    
    def get_system_stats(self):
        """Estat√≠sticas gerais do sistema"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            stats = {}
            
            # Contadores b√°sicos
            cursor.execute("SELECT COUNT(*) FROM docs WHERE content_status = 'active'")
            stats['active_docs'] = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM docs WHERE content_status = 'obsolete'")
            stats['obsolete_docs'] = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM docs_clusters")
            stats['total_clusters'] = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM docs_tags")
            stats['total_tags'] = cursor.fetchone()[0]
            
            # Qualidade m√©dia
            cursor.execute("SELECT AVG(quality_score) FROM docs WHERE content_status = 'active'")
            stats['avg_quality'] = cursor.fetchone()[0] or 0
            
            # Total de visualiza√ß√µes
            cursor.execute("SELECT SUM(view_count) FROM docs WHERE content_status = 'active'")
            stats['total_views'] = cursor.fetchone()[0] or 0
            
            return stats

def main():
    """Demonstra√ß√£o completa do sistema"""
    print("üöÄ DEMONSTRA√á√ÉO: Sistema de Documenta√ß√£o em Clusters")
    print("Data: 02/08/2025")
    print("=" * 70)
    print()
    
    manager = DocsClusterManager()
    
    # Estat√≠sticas gerais
    stats = manager.get_system_stats()
    print("üìä ESTAT√çSTICAS GERAIS:")
    print(f"   üìö Documentos ativos: {stats['active_docs']}")
    print(f"   üóëÔ∏è  Documentos obsoletos: {stats['obsolete_docs']}")
    print(f"   üìÅ Clusters organizacionais: {stats['total_clusters']}")
    print(f"   üè∑Ô∏è  Tags dispon√≠veis: {stats['total_tags']}")
    print(f"   ‚≠ê Qualidade m√©dia: {stats['avg_quality']:.1f}/10")
    print(f"   üëÄ Total de visualiza√ß√µes: {stats['total_views']:,}")
    print()
    
    # Overview dos clusters
    manager.show_cluster_overview()
    
    # Sa√∫de dos clusters
    manager.show_cluster_health()
    
    # Documentos por cluster (exemplo com MCP_CORE)
    manager.show_docs_by_cluster('MCP_CORE')
    
    # Gest√£o de documentos obsoletos
    manager.show_obsolete_management()
    
    # Documentos que precisam aten√ß√£o
    manager.show_docs_needing_attention()
    
    # Hist√≥rico de mudan√ßas
    manager.show_change_history(5)
    
    # Exemplo de busca
    manager.search_across_clusters('turso')
    
    print("üéâ BENEF√çCIOS DEMONSTRADOS:")
    print("=" * 70)
    print("‚úÖ Organiza√ß√£o em clusters tem√°ticos")
    print("‚úÖ Gest√£o autom√°tica de qualidade e relev√¢ncia")
    print("‚úÖ Identifica√ß√£o de conte√∫do obsoleto")
    print("‚úÖ Rastreamento de mudan√ßas e evolu√ß√£o")
    print("‚úÖ Sistema de aten√ß√£o para manuten√ß√£o")
    print("‚úÖ Busca inteligente entre clusters")
    print("‚úÖ Analytics em tempo real")
    print("‚úÖ Preven√ß√£o de duplica√ß√£o de conte√∫do")
    print()
    
    print("üí° CASOS DE USO:")
    print("‚úÖ Manter documenta√ß√£o sempre atualizada")
    print("‚úÖ Identificar gaps de conhecimento automaticamente") 
    print("‚úÖ Substituir conte√∫do obsoleto de forma controlada")
    print("‚úÖ M√©tricas de qualidade e engagement")
    print("‚úÖ Base estruturada para alimentar IA")
    print("‚úÖ Gest√£o de conhecimento organizacional")

if __name__ == "__main__":
    main()