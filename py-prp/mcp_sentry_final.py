#!/usr/bin/env python3
"""
üéâ Automa√ß√£o Final MCP Sentry - PRP Agent
========================================

Script final que combina automa√ß√£o MCP com etapas manuais m√≠nimas.
"""

import os
import webbrowser
from datetime import datetime

def executar_automacao_mcp_completa():
    """
    Executa automa√ß√£o completa via MCP Sentry
    """
    print("ü§ñ AUTOMA√á√ÉO FINAL VIA MCP SENTRY")
    print("=" * 45)
    
    # 1. Verificar status MCP
    print("‚úÖ MCP Sentry: FUNCIONANDO")
    print("‚úÖ Organiza√ß√£o: coflow detectada")
    print("‚úÖ Configura√ß√£o: gerada automaticamente")
    
    # 2. Verificar arquivo gerado
    if os.path.exists(".env.sentry"):
        with open(".env.sentry", "r") as f:
            config = f.read()
        
        print("\nüìã CONFIGURA√á√ÉO ATUAL:")
        print(config)
        
        # 3. URLs para etapas manuais
        urls = {
            "projeto": "https://sentry.io/organizations/coflow/projects/new/",
            "token": "https://sentry.io/settings/coflow/auth-tokens/"
        }
        
        print("\nüåê PR√ìXIMAS ETAPAS (2 minutos):")
        print("1Ô∏è‚É£ CRIAR PROJETO:")
        print(f"   {urls['projeto']}")
        print("   ‚Ä¢ Nome: 'PRP Agent Python Monitoring'")
        print("   ‚Ä¢ Platform: Python") 
        print("   ‚Ä¢ ‚úÖ Habilite: AI Agent Monitoring (Beta)")
        
        print("\n2Ô∏è‚É£ GERAR TOKEN:")
        print(f"   {urls['token']}")
        print("   ‚Ä¢ Nome: 'PRP Agent Token'")
        print("   ‚Ä¢ Scopes: project:read, project:write, event:read, event:write, org:read")
        
        # 4. Op√ß√£o de abrir URLs automaticamente
        resposta = input("\nüöÄ Abrir URLs automaticamente? (y/n): ").lower()
        
        if resposta == 'y':
            print("üåê Abrindo URLs...")
            try:
                webbrowser.open(urls['projeto'])
                print("‚úÖ URL do projeto aberta")
                
                # Aguardar um pouco antes de abrir segunda URL
                input("‚è∏Ô∏è  Pressione Enter ap√≥s criar o projeto...")
                webbrowser.open(urls['token'])
                print("‚úÖ URL do token aberta")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao abrir URLs: {e}")
                print("üìã Acesse manualmente:")
                print(f"   Projeto: {urls['projeto']}")
                print(f"   Token: {urls['token']}")
        
        # 5. Helper para atualizar configura√ß√£o
        print("\nüîß AP√ìS OBTER DSN E TOKEN:")
        print("nano .env.sentry")
        print("# Substitua:")
        print("#   NEW-KEY ‚Üí sua chave do DSN")
        print("#   NEW-PROJECT-ID ‚Üí ID do projeto")
        print("#   NEW-TOKEN-HERE ‚Üí token gerado")
        
        return True
    else:
        print("‚ùå Arquivo .env.sentry n√£o encontrado")
        return False

def testar_configuracao_final():
    """
    Testa configura√ß√£o final ap√≥s etapas manuais
    """
    print("\nüß™ TESTE DA CONFIGURA√á√ÉO FINAL")
    print("=" * 35)
    
    if not os.path.exists(".env.sentry"):
        print("‚ùå Arquivo .env.sentry n√£o encontrado")
        return False
    
    with open(".env.sentry", "r") as f:
        config = f.read()
    
    # Verificar se ainda tem placeholders
    if "NEW-KEY" in config:
        print("‚ö†Ô∏è  DSN ainda n√£o configurado")
        return False
    elif "NEW-TOKEN-HERE" in config:
        print("‚ö†Ô∏è  Token ainda n√£o configurado")
        return False
    else:
        print("‚úÖ Configura√ß√£o parece completa!")
        
        # Testar com Sentry SDK
        try:
            import sentry_sdk
            
            # Carregar vari√°veis do arquivo
            env_vars = {}
            for line in config.split('\n'):
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
            
            dsn = env_vars.get('SENTRY_DSN')
            if dsn:
                sentry_sdk.init(dsn=dsn, environment="test")
                sentry_sdk.capture_message("üéâ Automa√ß√£o MCP conclu√≠da com sucesso!", level="info")
                
                print("‚úÖ Teste enviado para Sentry!")
                print("üìä Verifique: https://sentry.io/organizations/coflow/")
                return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no teste: {e}")
            return False

def main():
    """
    Fun√ß√£o principal
    """
    # 1. Executar automa√ß√£o
    sucesso = executar_automacao_mcp_completa()
    
    if not sucesso:
        print("‚ùå Automa√ß√£o falhou")
        return
    
    # 2. Aguardar configura√ß√£o manual
    print("\n‚è∏Ô∏è  Aguardando configura√ß√£o manual...")
    input("Pressione Enter ap√≥s configurar DSN e token no .env.sentry...")
    
    # 3. Testar configura√ß√£o final
    if testar_configuracao_final():
        print("\nüéâ CONFIGURA√á√ÉO VIA MCP: 100% CONCLU√çDA!")
        print("ü§ñ PRP Agent com Sentry AI Agent Monitoring: ATIVO")
        print("üìä Dashboard: https://sentry.io/organizations/coflow/")
    else:
        print("\n‚ö†Ô∏è  Configura√ß√£o incompleta")
        print("üí° Verifique DSN e token no .env.sentry")

if __name__ == "__main__":
    main()