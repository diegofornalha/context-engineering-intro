#!/usr/bin/env python3
"""
Sistema de Sincroniza√ß√£o SQLite Local ‚Üî Turso Remoto
Data: 02/08/2025

Sistema inteligente de sincroniza√ß√£o bidirecional entre banco SQLite local
e Turso remoto, com detec√ß√£o de conflitos e resolu√ß√£o autom√°tica.
"""

import os
import json
import sqlite3
import hashlib
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from pathlib import Path
import subprocess
import tempfile

@dataclass
class SyncConfig:
    """Configura√ß√£o do sistema de sincroniza√ß√£o"""
    local_db_path: str = "context-memory.db"
    turso_db_name: str = "context-memory"
    turso_org: str = "diegofornalha"
    sync_interval_minutes: int = 5
    conflict_resolution: str = "local_wins"  # local_wins, remote_wins, merge, manual
    enable_auto_sync: bool = True
    backup_before_sync: bool = True
    max_sync_retries: int = 3

@dataclass
class SyncRecord:
    """Registro de sincroniza√ß√£o"""
    table_name: str
    record_id: Any
    local_hash: str
    remote_hash: str
    last_sync: datetime
    sync_status: str  # synced, conflict, pending, error

class TursoLocalSync:
    """
    Sistema de sincroniza√ß√£o entre SQLite local e Turso remoto
    """
    
    def __init__(self, config: SyncConfig = None):
        self.config = config or SyncConfig()
        self.local_db = self.config.local_db_path
        self.sync_tables = [
            'docs', 'docs_clusters', 'docs_tags', 'docs_tag_relations',
            'docs_changes', 'docs_obsolescence_analysis',
            'prps', 'prp_tasks', 'prp_context', 'prp_tags', 
            'prp_tag_relations', 'prp_history', 'prp_llm_analysis'
        ]
        self.setup_sync_infrastructure()
    
    def setup_sync_infrastructure(self):
        """Configura infraestrutura de sincroniza√ß√£o"""
        print("üîß Configurando infraestrutura de sincroniza√ß√£o...")
        
        with sqlite3.connect(self.local_db) as conn:
            # Tabela para controlar sincroniza√ß√£o
            conn.execute("""
                CREATE TABLE IF NOT EXISTS sync_control (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    table_name TEXT NOT NULL,
                    record_id TEXT NOT NULL,
                    local_hash TEXT,
                    remote_hash TEXT,
                    last_sync TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    sync_status TEXT DEFAULT 'pending',
                    sync_direction TEXT DEFAULT 'bidirectional',
                    conflict_data TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(table_name, record_id)
                )
            """)
            
            # Tabela de logs de sincroniza√ß√£o
            conn.execute("""
                CREATE TABLE IF NOT EXISTS sync_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    sync_session_id TEXT NOT NULL,
                    table_name TEXT,
                    operation TEXT,
                    records_affected INTEGER DEFAULT 0,
                    success BOOLEAN DEFAULT 1,
                    error_message TEXT,
                    execution_time_ms INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabela de configura√ß√µes de sync
            conn.execute("""
                CREATE TABLE IF NOT EXISTS sync_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Trigger para atualizar hashes quando dados mudam
            for table in self.sync_tables:
                if self.table_exists(conn, table):
                    conn.execute(f"""
                        CREATE TRIGGER IF NOT EXISTS sync_trigger_{table}
                        AFTER UPDATE ON {table}
                        FOR EACH ROW
                        BEGIN
                            INSERT OR REPLACE INTO sync_control (table_name, record_id, sync_status)
                            VALUES ('{table}', NEW.id, 'pending');
                        END
                    """)
            
            conn.commit()
    
    def table_exists(self, conn, table_name: str) -> bool:
        """Verifica se tabela existe"""
        cursor = conn.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name=?
        """, (table_name,))
        return cursor.fetchone() is not None
    
    def calculate_record_hash(self, table_name: str, record_id: Any, db_path: str = None) -> str:
        """Calcula hash MD5 de um registro espec√≠fico"""
        db_path = db_path or self.local_db
        
        with sqlite3.connect(db_path) as conn:
            cursor = conn.execute(f"PRAGMA table_info({table_name})")
            columns = [row[1] for row in cursor.fetchall()]
            
            # Buscar dados do registro
            cursor = conn.execute(f"""
                SELECT {','.join(columns)} FROM {table_name} WHERE id = ?
            """, (record_id,))
            
            record = cursor.fetchone()
            if not record:
                return ""
            
            # Criar string representativa do registro
            record_str = '|'.join(str(v) if v is not None else 'NULL' for v in record)
            
            # Calcular hash MD5
            return hashlib.md5(record_str.encode()).hexdigest()
    
    def get_turso_token(self) -> Optional[str]:
        """Obt√©m token do Turso a partir do ambiente ou CLI"""
        # Tentar vari√°vel de ambiente primeiro
        token = os.getenv('TURSO_AUTH_TOKEN')
        if token:
            return token
        
        # Tentar obter do CLI do Turso
        try:
            result = subprocess.run(['turso', 'auth', 'token'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                return result.stdout.strip()
        except (subprocess.TimeoutExpired, FileNotFoundError):
            pass
        
        return None
    
    def connect_to_turso(self) -> Optional[str]:
        """Conecta ao Turso e retorna path do banco tempor√°rio"""
        try:
            # Verificar se turso CLI est√° dispon√≠vel
            result = subprocess.run(['turso', 'db', 'list'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode != 0:
                print("‚ùå Turso CLI n√£o dispon√≠vel ou n√£o autenticado")
                return None
            
            # Obter URL do banco
            result = subprocess.run(['turso', 'db', 'show', self.config.turso_db_name, '--url'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode != 0:
                print(f"‚ùå Banco {self.config.turso_db_name} n√£o encontrado no Turso")
                return None
            
            db_url = result.stdout.strip()
            print(f"üîó Conectado ao Turso: {db_url}")
            
            # Criar arquivo tempor√°rio para dump do Turso
            temp_file = tempfile.NamedTemporaryFile(suffix='.db', delete=False)
            temp_file.close()
            
            # Fazer dump do banco Turso
            dump_result = subprocess.run([
                'turso', 'db', 'shell', self.config.turso_db_name,
                '.dump'
            ], capture_output=True, text=True, timeout=30)
            
            if dump_result.returncode == 0:
                # Criar banco SQLite tempor√°rio com o dump
                with sqlite3.connect(temp_file.name) as temp_conn:
                    temp_conn.executescript(dump_result.stdout)
                
                return temp_file.name
            
        except Exception as e:
            print(f"‚ùå Erro ao conectar com Turso: {e}")
        
        return None
    
    def compare_tables(self, local_db: str, remote_db: str, table_name: str) -> Dict[str, List]:
        """Compara tabela entre bancos local e remoto"""
        print(f"üîç Comparando tabela {table_name}...")
        
        differences = {
            'local_only': [],
            'remote_only': [],
            'conflicts': [],
            'synced': []
        }
        
        # Obter registros de ambos os bancos
        local_records = {}
        remote_records = {}
        
        # Local
        with sqlite3.connect(local_db) as conn:
            if self.table_exists(conn, table_name):
                cursor = conn.execute(f"SELECT id FROM {table_name}")
                for row in cursor.fetchall():
                    record_id = row[0]
                    local_records[record_id] = self.calculate_record_hash(table_name, record_id, local_db)
        
        # Remoto
        with sqlite3.connect(remote_db) as conn:
            if self.table_exists(conn, table_name):
                cursor = conn.execute(f"SELECT id FROM {table_name}")
                for row in cursor.fetchall():
                    record_id = row[0]
                    remote_records[record_id] = self.calculate_record_hash(table_name, record_id, remote_db)
        
        # Comparar
        all_ids = set(local_records.keys()) | set(remote_records.keys())
        
        for record_id in all_ids:
            local_hash = local_records.get(record_id)
            remote_hash = remote_records.get(record_id)
            
            if local_hash and not remote_hash:
                differences['local_only'].append(record_id)
            elif remote_hash and not local_hash:
                differences['remote_only'].append(record_id)
            elif local_hash != remote_hash:
                differences['conflicts'].append(record_id)
            else:
                differences['synced'].append(record_id)
        
        return differences
    
    def sync_record_to_remote(self, table_name: str, record_id: Any) -> bool:
        """Sincroniza um registro espec√≠fico para o Turso remoto"""
        try:
            # Obter dados do registro local
            with sqlite3.connect(self.local_db) as local_conn:
                cursor = local_conn.execute(f"PRAGMA table_info({table_name})")
                columns = [row[1] for row in cursor.fetchall()]
                
                cursor = local_conn.execute(f"""
                    SELECT {','.join(columns)} FROM {table_name} WHERE id = ?
                """, (record_id,))
                
                record = cursor.fetchone()
                if not record:
                    return False
            
            # Preparar comando SQL para Turso
            placeholders = ','.join(['?' for _ in columns])
            insert_sql = f"""
                INSERT OR REPLACE INTO {table_name} ({','.join(columns)})
                VALUES ({placeholders})
            """
            
            # Escapar dados para shell
            escaped_values = []
            for value in record:
                if value is None:
                    escaped_values.append('NULL')
                elif isinstance(value, str):
                    escaped_values.append(f"'{value.replace("'", "''")}'")
                else:
                    escaped_values.append(str(value))
            
            shell_sql = f"""
                INSERT OR REPLACE INTO {table_name} ({','.join(columns)})
                VALUES ({','.join(escaped_values)});
            """
            
            # Executar no Turso
            result = subprocess.run([
                'turso', 'db', 'shell', self.config.turso_db_name,
                shell_sql
            ], capture_output=True, text=True, timeout=30)
            
            return result.returncode == 0
            
        except Exception as e:
            print(f"‚ùå Erro ao sincronizar registro {record_id} da tabela {table_name}: {e}")
            return False
    
    def sync_record_from_remote(self, table_name: str, record_id: Any, remote_db: str) -> bool:
        """Sincroniza um registro espec√≠fico do Turso remoto"""
        try:
            # Obter dados do registro remoto
            with sqlite3.connect(remote_db) as remote_conn:
                cursor = remote_conn.execute(f"PRAGMA table_info({table_name})")
                columns = [row[1] for row in cursor.fetchall()]
                
                cursor = remote_conn.execute(f"""
                    SELECT {','.join(columns)} FROM {table_name} WHERE id = ?
                """, (record_id,))
                
                record = cursor.fetchone()
                if not record:
                    return False
            
            # Inserir no banco local
            with sqlite3.connect(self.local_db) as local_conn:
                placeholders = ','.join(['?' for _ in columns])
                local_conn.execute(f"""
                    INSERT OR REPLACE INTO {table_name} ({','.join(columns)})
                    VALUES ({placeholders})
                """, record)
                local_conn.commit()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao sincronizar registro {record_id} da tabela {table_name} do remoto: {e}")
            return False
    
    def perform_sync(self, direction: str = 'bidirectional') -> Dict[str, Any]:
        """Executa sincroniza√ß√£o completa"""
        sync_session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        sync_results = {
            'session_id': sync_session_id,
            'start_time': datetime.now(),
            'tables_synced': 0,
            'records_synced': 0,
            'conflicts_found': 0,
            'errors': [],
            'success': True
        }
        
        print(f"üîÑ Iniciando sincroniza√ß√£o (sess√£o: {sync_session_id})")
        print(f"üìç Dire√ß√£o: {direction}")
        
        # Conectar ao Turso
        remote_db_path = self.connect_to_turso()
        if not remote_db_path:
            sync_results['success'] = False
            sync_results['errors'].append("N√£o foi poss√≠vel conectar ao Turso")
            return sync_results
        
        try:
            # Sincronizar cada tabela
            for table_name in self.sync_tables:
                print(f"\nüìã Sincronizando tabela: {table_name}")
                
                # Comparar diferen√ßas
                differences = self.compare_tables(self.local_db, remote_db_path, table_name)
                
                # Relat√≥rio de diferen√ßas
                print(f"   üìä Local apenas: {len(differences['local_only'])}")
                print(f"   üìä Remoto apenas: {len(differences['remote_only'])}")
                print(f"   ‚ö†Ô∏è  Conflitos: {len(differences['conflicts'])}")
                print(f"   ‚úÖ Sincronizados: {len(differences['synced'])}")
                
                # Processar sincroniza√ß√£o baseada na dire√ß√£o
                if direction in ['bidirectional', 'local_to_remote']:
                    # Enviar registros locais para remoto
                    for record_id in differences['local_only']:
                        if self.sync_record_to_remote(table_name, record_id):
                            sync_results['records_synced'] += 1
                            print(f"   ‚úÖ Enviado para remoto: {record_id}")
                        else:
                            sync_results['errors'].append(f"Falha ao enviar {table_name}:{record_id}")
                
                if direction in ['bidirectional', 'remote_to_local']:
                    # Trazer registros remotos para local
                    for record_id in differences['remote_only']:
                        if self.sync_record_from_remote(table_name, record_id, remote_db_path):
                            sync_results['records_synced'] += 1
                            print(f"   ‚úÖ Recebido do remoto: {record_id}")
                        else:
                            sync_results['errors'].append(f"Falha ao receber {table_name}:{record_id}")
                
                # Tratar conflitos
                if differences['conflicts']:
                    sync_results['conflicts_found'] += len(differences['conflicts'])
                    for record_id in differences['conflicts']:
                        resolved = self.resolve_conflict(table_name, record_id, remote_db_path)
                        if resolved:
                            sync_results['records_synced'] += 1
                            print(f"   üîß Conflito resolvido: {record_id}")
                        else:
                            sync_results['errors'].append(f"Conflito n√£o resolvido {table_name}:{record_id}")
                
                sync_results['tables_synced'] += 1
            
            # Atualizar controle de sincroniza√ß√£o
            self.update_sync_control(sync_session_id, sync_results)
            
        finally:
            # Limpar arquivo tempor√°rio
            if remote_db_path and os.path.exists(remote_db_path):
                os.unlink(remote_db_path)
        
        sync_results['end_time'] = datetime.now()
        sync_results['duration'] = (sync_results['end_time'] - sync_results['start_time']).total_seconds()
        
        return sync_results
    
    def resolve_conflict(self, table_name: str, record_id: Any, remote_db_path: str) -> bool:
        """Resolve conflito entre vers√µes local e remota"""
        resolution = self.config.conflict_resolution
        
        if resolution == 'local_wins':
            return self.sync_record_to_remote(table_name, record_id)
        elif resolution == 'remote_wins':
            return self.sync_record_from_remote(table_name, record_id, remote_db_path)
        elif resolution == 'merge':
            # Implementar l√≥gica de merge (complexa)
            return self.merge_conflicted_record(table_name, record_id, remote_db_path)
        else:
            # Manual - apenas registrar o conflito
            self.log_manual_conflict(table_name, record_id)
            return False
    
    def merge_conflicted_record(self, table_name: str, record_id: Any, remote_db_path: str) -> bool:
        """Merge inteligente de registros conflitantes"""
        # Para documenta√ß√£o, preferir vers√£o com maior qualidade ou mais recente
        try:
            if table_name == 'docs':
                # Comparar quality_score e updated_at
                with sqlite3.connect(self.local_db) as local_conn:
                    local_cursor = local_conn.execute("""
                        SELECT quality_score, updated_at FROM docs WHERE id = ?
                    """, (record_id,))
                    local_data = local_cursor.fetchone()
                
                with sqlite3.connect(remote_db_path) as remote_conn:
                    remote_cursor = remote_conn.execute("""
                        SELECT quality_score, updated_at FROM docs WHERE id = ?
                    """, (record_id,))
                    remote_data = remote_cursor.fetchone()
                
                if local_data and remote_data:
                    local_quality, local_updated = local_data
                    remote_quality, remote_updated = remote_data
                    
                    # Preferir maior qualidade, se igual, preferir mais recente
                    if local_quality > remote_quality:
                        return self.sync_record_to_remote(table_name, record_id)
                    elif remote_quality > local_quality:
                        return self.sync_record_from_remote(table_name, record_id, remote_db_path)
                    else:
                        # Qualidades iguais, preferir mais recente
                        if local_updated > remote_updated:
                            return self.sync_record_to_remote(table_name, record_id)
                        else:
                            return self.sync_record_from_remote(table_name, record_id, remote_db_path)
            
            # Para outras tabelas, preferir vers√£o local por padr√£o
            return self.sync_record_to_remote(table_name, record_id)
            
        except Exception as e:
            print(f"‚ùå Erro no merge: {e}")
            return False
    
    def log_manual_conflict(self, table_name: str, record_id: Any):
        """Registra conflito para resolu√ß√£o manual"""
        with sqlite3.connect(self.local_db) as conn:
            conn.execute("""
                INSERT OR REPLACE INTO sync_control 
                (table_name, record_id, sync_status, conflict_data)
                VALUES (?, ?, 'conflict', ?)
            """, (table_name, record_id, json.dumps({
                'timestamp': datetime.now().isoformat(),
                'requires_manual_resolution': True
            })))
            conn.commit()
    
    def update_sync_control(self, session_id: str, results: Dict):
        """Atualiza controle de sincroniza√ß√£o"""
        with sqlite3.connect(self.local_db) as conn:
            conn.execute("""
                INSERT INTO sync_logs 
                (sync_session_id, operation, records_affected, success, execution_time_ms)
                VALUES (?, 'full_sync', ?, ?, ?)
            """, (
                session_id, 
                results['records_synced'],
                results['success'],
                int(results.get('duration', 0) * 1000)
            ))
            conn.commit()
    
    def get_sync_status(self) -> Dict[str, Any]:
        """Obt√©m status atual da sincroniza√ß√£o"""
        with sqlite3.connect(self.local_db) as conn:
            # √öltima sincroniza√ß√£o
            cursor = conn.execute("""
                SELECT * FROM sync_logs 
                ORDER BY timestamp DESC LIMIT 1
            """)
            last_sync = cursor.fetchone()
            
            # Registros pendentes
            cursor = conn.execute("""
                SELECT table_name, COUNT(*) as pending_count
                FROM sync_control 
                WHERE sync_status = 'pending'
                GROUP BY table_name
            """)
            pending = dict(cursor.fetchall())
            
            # Conflitos manuais
            cursor = conn.execute("""
                SELECT COUNT(*) FROM sync_control 
                WHERE sync_status = 'conflict'
            """)
            conflicts = cursor.fetchone()[0]
            
            return {
                'last_sync': last_sync,
                'pending_records': pending,
                'manual_conflicts': conflicts,
                'turso_connected': self.connect_to_turso() is not None
            }
    
    def auto_sync_daemon(self):
        """Daemon de sincroniza√ß√£o autom√°tica"""
        print(f"ü§ñ Iniciando daemon de sync (intervalo: {self.config.sync_interval_minutes}min)")
        
        while self.config.enable_auto_sync:
            try:
                print(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')} - Executando sync autom√°tico...")
                results = self.perform_sync()
                
                if results['success']:
                    print(f"‚úÖ Sync conclu√≠do: {results['records_synced']} registros")
                else:
                    print(f"‚ùå Sync falhou: {len(results['errors'])} erros")
                
                # Aguardar pr√≥ximo ciclo
                time.sleep(self.config.sync_interval_minutes * 60)
                
            except KeyboardInterrupt:
                print("\nüõë Daemon de sync interrompido pelo usu√°rio")
                break
            except Exception as e:
                print(f"‚ùå Erro no daemon de sync: {e}")
                time.sleep(60)  # Aguardar 1 minuto antes de tentar novamente

def demo_sync_system():
    """Demonstra√ß√£o do sistema de sincroniza√ß√£o"""
    print("üîÑ DEMONSTRA√á√ÉO: Sistema de Sincroniza√ß√£o SQLite ‚Üî Turso")
    print("=" * 60)
    
    # Configurar sistema
    config = SyncConfig(
        sync_interval_minutes=1,  # Para demo
        conflict_resolution='local_wins',
        enable_auto_sync=False
    )
    
    sync_system = TursoLocalSync(config)
    
    # Verificar status inicial
    print("\nüìä STATUS INICIAL:")
    status = sync_system.get_sync_status()
    print(f"   üîó Turso conectado: {'‚úÖ' if status['turso_connected'] else '‚ùå'}")
    print(f"   üìã Registros pendentes: {sum(status['pending_records'].values())}")
    print(f"   ‚ö†Ô∏è  Conflitos manuais: {status['manual_conflicts']}")
    
    if status['turso_connected']:
        # Executar sincroniza√ß√£o de teste
        print(f"\nüöÄ Executando sincroniza√ß√£o de teste...")
        results = sync_system.perform_sync('local_to_remote')
        
        print(f"\nüìà RESULTADOS:")
        print(f"   üìä Tabelas sincronizadas: {results['tables_synced']}")
        print(f"   üìã Registros sincronizados: {results['records_synced']}")
        print(f"   ‚ö†Ô∏è  Conflitos encontrados: {results['conflicts_found']}")
        print(f"   ‚è±Ô∏è  Dura√ß√£o: {results['duration']:.2f}s")
        print(f"   {'‚úÖ Sucesso' if results['success'] else '‚ùå Falhou'}")
        
        if results['errors']:
            print(f"\n‚ùå ERROS ({len(results['errors'])}):")
            for error in results['errors'][:5]:
                print(f"   ‚Ä¢ {error}")
    else:
        print("\n‚ö†Ô∏è  Turso n√£o conectado - funcionalidades limitadas")
        print("   Configure: turso auth login")
    
    print(f"\nüí° FUNCIONALIDADES DISPON√çVEIS:")
    print(f"   üîÑ Sync bidirecional autom√°tico")
    print(f"   üîç Detec√ß√£o inteligente de conflitos")
    print(f"   üîß Resolu√ß√£o autom√°tica de conflitos")
    print(f"   üìä Monitoramento de status em tempo real")
    print(f"   ü§ñ Daemon de sincroniza√ß√£o autom√°tica")
    print(f"   üìã Log completo de opera√ß√µes")

def main():
    """Fun√ß√£o principal"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        sync_system = TursoLocalSync()
        
        if command == 'sync':
            direction = sys.argv[2] if len(sys.argv) > 2 else 'bidirectional'
            results = sync_system.perform_sync(direction)
            print(f"Sincroniza√ß√£o conclu√≠da: {results['records_synced']} registros")
            
        elif command == 'status':
            status = sync_system.get_sync_status()
            print(json.dumps(status, indent=2, default=str))
            
        elif command == 'daemon':
            sync_system.auto_sync_daemon()
            
        else:
            print("Comandos: sync [direction], status, daemon")
    else:
        demo_sync_system()

if __name__ == "__main__":
    main()